import streamlit as st
from datetime import datetime  # simpler than datetime.datetime
import requests

BASE_URL = "http://localhost:8000"  # Backend URL

st.set_page_config(
    page_title="‚úàÔ∏è WanderMind - Your travel planner",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üåç WanderMind: Your AI Trip Planner")
st.caption(
    "Plan smarter journeys, discover new destinations, and build personalized itineraries with AI."
)

# Initialize the chat history once
if "messages" not in st.session_state:
    st.session_state.messages = []  # not strictly used below, but ready if you add history

# Friendly prompt
st.header("Hey there! How can I assist you in planning your trip today?")
st.write("Tell me where you want to visit and what you enjoy (food, museums, nature, budget, dates).")

# -------- Chat input form --------
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input(
        "User Input",
        placeholder="e.g., 5-day Japan trip in April with cherry blossoms, mid-range budget",
        key="input",
        type="default",
    )
    submit_button = st.form_submit_button("Send")

# -------- Submission handling --------
if submit_button and user_input.strip():
    try:
        # Show spinner while the backend processes the request
        with st.spinner("Planning your trip..."):
            payload = {"question": user_input}
            # Add a timeout so the UI doesn't hang forever
            response = requests.post(f"{BASE_URL}/query", json=payload, timeout=30)

        # Good response
        if response.ok:
            answer = response.json().get("answer", "No answer returned.")

            # Build clean markdown (no leading spaces that break headers)
            generated_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            markdown_content = f"""# AI Travel Plan

**Generated:** {generated_at}  
**Created by:** WanderMind AI Travel Planner Agent

---

{answer}

---

*This travel plan was generated by AI. Please verify details before making any bookings.*"""

            st.markdown(markdown_content)

        # Backend returned an error (4xx/5xx)
        else:
            st.error(f"Bot failed to respond. Status: {response.status_code}")
            # Show backend error body if any (helps you debug)
            try:
                st.code(response.text or "<no response body>")
            except Exception:
                pass

    except requests.exceptions.Timeout:
        st.error("The request to the trip planner timed out. Please try again.")
    except requests.exceptions.ConnectionError:
        st.error("Cannot connect to the backend. Is the server running at BASE_URL?")
    except Exception as e:
        # Don't 'raise f"...": that's invalid. Use st.exception or build a message.
        st.exception(e)
